# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Step 1: Load the California Housing dataset
california = fetch_california_housing()
X = california.data  # Features (independent variables)
y = california.target  # Target variable (price)

# Step 2: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Apply Polynomial Feature Transformation (degree 2, you can experiment with the degree)
poly = PolynomialFeatures(degree=2)  # You can adjust the degree of the polynomial
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

# Step 4: Train the Polynomial Linear Regression model
model = LinearRegression()
model.fit(X_train_poly, y_train)

# Step 5: Make predictions on the test set
y_pred = model.predict(X_test_poly)

# Step 6: Evaluate the model using Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

# Step 7: Print the results
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")

# Optionally, visualize the first feature's polynomial regression result
# For simplicity, let's take the first feature (longitude) and its predicted values
fig, ax = plt.subplots(figsize=(10, 6))
ax.scatter(X_test[:, 0], y_test, color='blue', label='Actual')  # Longitude
ax.scatter(X_test[:, 0], y_pred, color='red', label='Predicted')
ax.set_title('Polynomial Regression: Actual vs Predicted (Feature: Longitude)')
ax.set_xlabel('Longitude')
ax.set_ylabel('Price')
ax.legend()
plt.show()
