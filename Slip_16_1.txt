import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

# Generate some example data for binary classification
# Example: 100 samples with 3 features each
X_train = np.random.randn(100, 3)
y_train = np.random.randint(0, 2, size=(100, 1))  # Binary target variable (0 or 1)

# Step 1: Build the two-layered neural network model
model = Sequential()

# First hidden layer with 5 neurons and ReLU activation function
model.add(Dense(5, input_dim=3, activation='relu'))

# Second layer (output layer) with 1 neuron and Sigmoid activation function
model.add(Dense(1, activation='sigmoid'))

# Step 2: Compile the model
model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

# Step 3: Train the model
model.fit(X_train, y_train, epochs=10, batch_size=10)

# Step 4: Evaluate the model
loss, accuracy = model.evaluate(X_train, y_train)
print(f"Model Loss: {loss}")
print(f"Model Accuracy: {accuracy * 100:.2f}%")

# Step 5: Make predictions
predictions = model.predict(X_train)
print(f"Predictions: {predictions[:5]}")  # Show first 5 predictions
