#Step 1: Install Necessary Libraries
Make sure you have installed the required libraries:


pip install pandas scikit-learn

#csv file 

ID,Age,Experience,Income,Family,CCAge,Education,Mortgage,Personal Loan,Securities Account,CD Account,Online,CreditCard
1,35,10,70000,3,10,Masters,200000,1,0,0,1,1
2,45,20,120000,4,20,PhD,0,0,1,1,1,0
3,38,15,80000,2,15,Bachelor,50000,1,0,1,1,0
4,50,25,150000,3,25,Masters,100000,1,1,1,0,1
5,33,8,75000,2,8,Bachelor,30000,0,0,0,1,0
6,28,5,62000,1,5,Bachelor,0,0,0,0,0,0
7,40,18,95000,3,18,Masters,200000,1,1,1,1,1
8,55,30,180000,4,30,PhD,0,1,1,1,0,1


#main code 

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Step 1: Load the dataset
df = pd.read_csv('UniversalBank.csv')

# Step 2: Preprocess the dataset
# Display the first few rows to understand the structure
print(df.head())

# Assuming that 'Personal Loan' is the target column (binary classification: Yes/No)
# We will drop non-relevant columns (e.g., customer ID, name) and handle categorical features

# Drop columns that won't be used for prediction
df = df.drop(columns=['ID', 'ZIP Code', 'Family'])  # Example: remove irrelevant columns

# Convert categorical columns to numeric (if any)
# Assuming 'Education' is categorical, and we need to encode it (if not, skip this)
df['Education'] = df['Education'].map({'PhD': 2, 'Masters': 1, 'Bachelor': 0})

# Step 3: Split the dataset into features (X) and target (y)
X = df.drop('Personal Loan', axis=1)  # Features
y = df['Personal Loan']  # Target variable (binary classification)

# Step 4: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 5: Normalize the features (important for SVM)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 6: Train the Linear SVM model
svm_model = SVC(kernel='linear')  # Linear kernel
svm_model.fit(X_train_scaled, y_train)

# Step 7: Make predictions on the test set
y_pred = svm_model.predict(X_test_scaled)

# Step 8: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Detailed classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

