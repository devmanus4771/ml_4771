import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

# Sample dataset
data = {
    'SquareFeet': [750, 800, 850, 900, 1000, 1050, 1100, 1200, 1300, 1400],
    'Price': [150000, 160000, 170000, 175000, 190000, 195000, 200000, 220000, 230000, 240000]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Extracting features and target variable
X = df[['SquareFeet']].values
y = df['Price'].values

# Split data into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression Model
linear_regressor = LinearRegression()
linear_regressor.fit(X_train, y_train)

# Polynomial Regression Model
poly = PolynomialFeatures(degree=3)  # Degree of the polynomial (you can change the degree)
X_poly = poly.fit_transform(X_train)
poly_regressor = LinearRegression()
poly_regressor.fit(X_poly, y_train)

# Predicting results
y_pred_linear = linear_regressor.predict(X_test)
y_pred_poly = poly_regressor.predict(poly.transform(X_test))

# Plotting the results
plt.figure(figsize=(10, 6))

# Plotting Linear Regression Results
plt.subplot(1, 2, 1)
plt.scatter(X, y, color='blue')
plt.plot(X, linear_regressor.predict(X), color='red')
plt.title('Linear Regression: House Price vs Square Feet')
plt.gca().set_xlabel('Square Feet')
plt.gca().set_ylabel('Price')

# Plotting Polynomial Regression Results
plt.subplot(1, 2, 2)
plt.scatter(X, y, color='blue')
plt.plot(np.sort(X[:, 0]), poly_regressor.predict(poly.transform(np.sort(X[:, 0]).reshape(-1, 1))), color='green')
plt.title('Polynomial Regression: House Price vs Square Feet')
plt.gca().set_xlabel('Square Feet')
plt.gca().set_ylabel('Price')

plt.tight_layout()
plt.show()

# Output predictions and evaluation
print(f"Linear Regression Prediction: {y_pred_linear}")
print(f"Polynomial Regression Prediction: {y_pred_poly}")
