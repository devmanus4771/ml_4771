import numpy as np
import matplotlib.pyplot as plt

# Sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# ReLU activation function and its derivative
def relu(x):
    return np.maximum(0, x)

def relu_derivative(x):
    return (x > 0).astype(float)

# Neural Network Class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights
        self.W1 = np.random.randn(input_size, hidden_size)
        self.W2 = np.random.randn(hidden_size, output_size)
        self.b1 = np.zeros((1, hidden_size))
        self.b2 = np.zeros((1, output_size))

    def forward(self, X):
        # Forward propagation
        self.z1 = np.dot(X, self.W1) + self.b1
        self.a1 = relu(self.z1)  # Hidden layer activation
        self.z2 = np.dot(self.a1, self.W2) + self.b2
        self.a2 = sigmoid(self.z2)  # Output layer activation
        return self.a2

    def backward(self, X, y, learning_rate=0.01):
        # Backward propagation
        m = X.shape[0]
        
        # Output layer error
        output_error = self.a2 - y
        output_delta = output_error * sigmoid_derivative(self.a2)
        
        # Hidden layer error
        hidden_error = output_delta.dot(self.W2.T)
        hidden_delta = hidden_error * relu_derivative(self.a1)
        
        # Gradients for weights and biases
        dW2 = self.a1.T.dot(output_delta) / m
        db2 = np.sum(output_delta, axis=0, keepdims=True) / m
        dW1 = X.T.dot(hidden_delta) / m
        db1 = np.sum(hidden_delta, axis=0, keepdims=True) / m
        
        # Update weights and biases
        self.W2 -= learning_rate * dW2
        self.b2 -= learning_rate * db2
        self.W1 -= learning_rate * dW1
        self.b1 -= learning_rate * db1

    def train(self, X, y, epochs=1000, learning_rate=0.01):
        for _ in range(epochs):
            self.forward(X)
            self.backward(X, y, learning_rate)

    def predict(self, X):
        return self.forward(X)

# Example usage with a simple dataset
if __name__ == "__main__":
    # Sample dataset (logical OR)
    X = np.array([[0, 0],
                  [0, 1],
                  [1, 0],
                  [1, 1]])
    y = np.array([[0], [1], [1], [0]])  # XOR outputs

    # Initialize the neural network with 2 input neurons, 4 hidden neurons, and 1 output neuron
    nn = NeuralNetwork(input_size=2, hidden_size=4, output_size=1)

    # Train the network
    nn.train(X, y, epochs=10000, learning_rate=0.1)

    # Make predictions
    predictions = nn.predict(X)
    print("Predictions:")
    print(predictions)

    # Plot the decision boundary for visualization (optional)
    plt.scatter(X[:, 0], X[:, 1], c=y[:, 0], cmap='coolwarm')
    plt.title("Neural Network - XOR Problem")
    plt.show()
