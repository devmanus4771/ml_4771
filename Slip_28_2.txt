# Import necessary libraries
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Load the Iris dataset
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the data (SVM performs better with standardized data)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# List of kernels to evaluate
kernels = ['linear', 'poly', 'rbf', 'sigmoid']

# Dictionary to store accuracy results
accuracy_results = {}

# Train and evaluate an SVM model for each kernel
for kernel in kernels:
    svm = SVC(kernel=kernel)
    svm.fit(X_train, y_train)
    y_pred = svm.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_results[kernel] = accuracy
    print(f"Kernel: {kernel}, Accuracy: {accuracy:.2f}")

# Function to predict the type of flower based on input features
def predict_flower(sepal_length, sepal_width, petal_length, petal_width, kernel='linear'):
    input_data = [[sepal_length, sepal_width, petal_length, petal_width]]
    input_data = scaler.transform(input_data)
    svm = SVC(kernel=kernel)
    svm.fit(X, y)
    prediction = svm.predict(input_data)
    return iris.target_names[prediction[0]]

# Example prediction
flower_type = predict_flower(5.1, 3.5, 1.4, 0.2, kernel='linear')
print(f"Predicted flower type: {flower_type}")