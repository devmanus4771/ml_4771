import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Step 1: Load the Iris dataset
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Target labels

# Step 2: Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 3: Apply PCA to reduce the data to 2D
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Step 4: Train a classifier using the reduced 2D data (Logistic Regression here)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)
classifier = LogisticRegression(max_iter=200)
classifier.fit(X_train, y_train)

# Step 5: Predict on the test data and calculate accuracy
y_pred = classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the model: {accuracy * 100:.2f}%")

# Step 6: Visualize the 2D data with the predictions
fig, ax = plt.subplots(figsize=(8, 6))
scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', edgecolor='k', s=100)
ax.set_title('Iris Dataset PCA (2D)')
ax.set_xlabel('Principal Component 1')
ax.set_ylabel('Principal Component 2')
fig.colorbar(scatter)
plt.show()

# Step 7: Predict a new flower measurement
new_flower = np.array([[5.1, 3.5, 1.4, 0.2]])  # Example measurements (sepal length, sepal width, petal length, petal width)
new_flower_scaled = scaler.transform(new_flower)  # Standardize the new flower
new_flower_pca = pca.transform(new_flower_scaled)  # Apply PCA to the new flower data

# Predict using the trained model
prediction = classifier.predict(new_flower_pca)
print(f"The predicted class for the new flower is: {iris.target_names[prediction][0]}")
