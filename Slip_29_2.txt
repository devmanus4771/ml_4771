
# Import necessary libraries
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score


# 1. Load the employee dataset (you can replace this with your own dataset)
# For demonstration, I'll generate a simple random dataset with income and other numeric features
import numpy as np
np.random.seed(42)
data = pd.DataFrame({
    'age': np.random.randint(20, 60, 100),
    'years_of_experience': np.random.randint(1, 35, 100),
    'income': np.random.randint(20000, 150000, 100)
})

# 2. Preprocess the data
# Drop missing or null values if any (for real dataset)
data.dropna(inplace=True)

# Standardize the income feature (and other numerical features)
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)

# 3. Use Elbow method to find the optimal number of clusters
wcss = []
k_values = range(1, 11)  # Try k from 1 to 10

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    wcss.append(kmeans.inertia_)  # WCSS: within-cluster sum of squares


# Plot the Elbow graph
plt.figure(figsize=(8, 5))
plt.plot(k_values, wcss, marker='o', linestyle='--')
plt.title('Elbow Method to determine optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS')
plt.show()

# 4. Use Silhouette score to find the best number of clusters
silhouette_scores = []

for k in range(2, 11):  # Silhouette score is valid for k >= 2
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    cluster_labels = kmeans.predict(scaled_data)
    silhouette_avg = silhouette_score(scaled_data, cluster_labels)
    silhouette_scores.append(silhouette_avg)

# Plot Silhouette scores
plt.figure(figsize=(8, 5))
plt.plot(range(2, 11), silhouette_scores, marker='o', linestyle='--')
plt.title('Silhouette Score for different k values')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.show()

# 5. Choose the best k (based on elbow method and silhouette score) and fit the K-means model
optimal_k = silhouette_scores.index(max(silhouette_scores)) + 2  # since index starts at 0, add 2 to match k value
print(f"Optimal number of clusters (k) based on Silhouette Score: {optimal_k}")

kmeans = KMeans(n_clusters=optimal_k, random_state=42)
clusters = kmeans.fit_predict(scaled_data)

# Add the cluster labels back to the original data
data['Cluster'] = clusters

# Display the clustered data
print(data.head())

# 6. Visualize the clusters (if necessary)
plt.figure(figsize=(8, 5))
plt.scatter(data['income'], data['years_of_experience'], c=data['Cluster'], cmap='viridis')
plt.title('Employee Clusters based on Income and Experience')
plt.xlabel('Income')
plt.ylabel('Years of Experience')
plt.colorbar(label='Cluster')
plt.show()